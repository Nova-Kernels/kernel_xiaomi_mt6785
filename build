#!/bin/bash

# Defined path
MainPath="$(pwd)"
Proton="$(pwd)/../Proton"
Azure="$(pwd)/../Azure"
Clang="$(pwd)/../Clang"
TRB="$(pwd)/../TRB"
DTC="$(pwd)/../DragonTC"
GCC64="$(pwd)/../GCC64"
GCC="$(pwd)/../GCC"
gcc64="$(pwd)/../gcc64"
gcc="$(pwd)/../gcc"
Any="$(pwd)/../Any"
Vortex="$(pwd)/../Vortex"



# Make flashable zip
MakeZip() {
    if [ ! -d $Any ]; then
        git clone github.com/Wahid7852/Anykernel -b master $Any
        cd $Any
    else
        cd $Any
        git reset --hard
        git checkout master
        git fetch origin master
        git reset --hard origin/master
    fi
    cp -af $MainPath/out/arch/arm64/boot/Image.gz-dtb $Any
    sed -i "s/kernel.string=.*/kernel.string=$KERNEL_NAME by Abdul7852/g" anykernel.sh
    zip -r9 $MainPath/"[$Compiler]-[T-OSS]-$ZIP_KERNEL_VERSION-$KERNEL_NAME-A13.zip" * -x .git README.md *placeholder
    cd $MainPath
}

# Clone compiler
Clone_GCC() {

    if [ ! -d $GCC64 ]; then
        git clone --depth=1 https://github.com/mvaisakh/gcc-arm64 -b gcc-master $GCC64
    else
        cd $GCC64
        git fetch origin gcc-master
        git checkout FETCH_HEAD
        git branch -D gcc-master
        git branch gcc-master && git checkout gcc-master && git reset --hard a7650270d71c78e1d9baab1c34fde1659425ddee
        cd $MainPath
    fi
    GCC64_Version="$($GCC64/bin/*gcc --version | grep gcc)"

    if [ ! -d $GCC ]; then
        git clone --depth=1 https://github.com/mvaisakh/gcc-arm -b gcc-master $GCC
    else
        cd $GCC
        git fetch origin gcc-master
        git checkout FETCH_HEAD
        git branch -D gcc-master
        git branch gcc-master && git checkout gcc-master && git reset --hard 6d324f4fba197ae42761dc1f8c8bbb5fb607ffcf
        cd $MainPath
    fi
    GCC_Version="$($GCC/bin/*gcc --version | grep gcc)"
}

Clone_TRB() {
 
    if [ ! -d $TRB ]; then
        git clone --depth=1 https://gitlab.com/varunhardgamer/trb_clang.git -b 14 $TRB
    else
        cd $TRB
        git fetch origin 14
        git checkout FETCH_HEAD
        git branch -D 14
        git branch 14 && git checkout 14
        cd $MainPath
    fi
    TRB_Version="$($TRB/bin/clang --version | grep clang)"
}

Clone_Proton() {
 
    if [ ! -d $Proton ]; then
        git clone --depth=1 https://github.com/kdrag0n/proton-clang -b master $Proton
    else
        cd $Proton
        git fetch origin master
        git checkout FETCH_HEAD
        git branch -D master
        git branch master && git checkout master
        cd $MainPath
    fi
    Proton_Version="$($Proton/bin/clang --version | grep clang)"
}

Clone_Azure() {
 
    if [ ! -d $Azure ]; then
        git clone --depth=1 https://gitlab.com/Panchajanya1999/azure-clang.git -b main $Azure
    else
        cd $Azure
        git fetch origin main
        git checkout FETCH_HEAD
        git branch -D main
        git branch main && git checkout main
        cd $MainPath
    fi
    Proton_Version="$($Azure/bin/clang --version | grep clang)"
}

Clone_Vortex() {
 
    if [ ! -d $Vortex ]; then
        git clone --depth=1 https://github.com/vijaymalav564/vortex-clang.git -b master $Vortex
    else
        cd $Azure
        git fetch origin master
        git checkout FETCH_HEAD
        git branch -D master
        git branch master && git checkout master
        cd $MainPath
    fi
    Proton_Version="$($Azure/bin/clang --version | grep clang)"
}
Clone_Clang() {
 
    if [ ! -d $Clang ]; then
        git clone --depth=1 https://github.com/AndroidTanz/Google-Clang-14.0.2 -b 14 $Clang
    else
        cd $Clang
        git fetch origin 14
        git checkout FETCH_HEAD
        git branch -D 14
        git branch 14 && git checkout 14
        cd $MainPath
    fi
    Clang_Version="$($Clang/bin/clang --version | grep clang)"
}

Clone_DTC() {
 
    if [ ! -d $DTC ]; then
        git clone --depth=1 https://github.com/TeraaBytee/DragonTC $DTC
    else
        cd $DTC
        git fetch origin 10.0
        git checkout FETCH_HEAD
        git branch -D 10.0
        git branch 10.0 && git checkout 10.0
        cd $MainPath
    fi
    DTC_Version="$($DTC/bin/clang --version | grep clang)"

    if [ ! -d $gcc64 ]; then
        git clone --depth=1 https://github.com/TeraaBytee/aarch64-linux-android-4.9 $gcc64
    else
        cd $gcc64
        git fetch origin master
        git checkout FETCH_HEAD
        git branch -D master
        git branch master && git checkout master
        cd $MainPath
    fi
    if [ ! -d $gcc ]; then
        git clone --depth=1 https://github.com/TeraaBytee/arm-linux-androideabi-4.9 $gcc
    else
        cd $gcc
        git fetch origin master
        git checkout FETCH_HEAD
        git branch -D master
        git branch master && git checkout master
        cd $MainPath
    fi
}

# Defined config
HeadCommit="$(git log --pretty=format:'%h' -1)"
export ARCH="arm64"
export SUBARCH="arm64"
export KBUILD_BUILD_USER="Abdul7852"
export KBUILD_BUILD_HOST="-Stable"
Defconfig="begonia_user_defconfig"
KERNEL_NAME=$(cat "$MainPath/arch/arm64/configs/$Defconfig" | grep "CONFIG_LOCALVERSION=" | sed 's/CONFIG_LOCALVERSION="-*//g' | sed 's/"*//g' )
ZIP_KERNEL_VERSION="4.14.$(cat "$MainPath/Makefile" | grep "SUBLEVEL =" | sed 's/SUBLEVEL = *//g')"

# Start building
Build_GCC() {
    Compiler=GCC

    rm -rf out
    TIME=$(date +"%m%d%H%M")
    BUILD_START=$(date +"%s")

    make  -j$(nproc --all)  O=out ARCH=arm64 SUBARCH=arm64 $Defconfig
    exec 2> >(tee -a out/error.log >&2)
    make  -j$(nproc --all)  O=out \
                            PATH="$GCC64/bin:$GCC/bin:/usr/bin:$PATH" \
                            AR=aarch64-elf-ar \
                            NM=llvm-nm \
                            LD=ld.lld \
                            OBCOPY=llvm-objcopy \
                            OBJDUMP=aarch64-elf-objdump \
                            STRIP=aarch64-elf-strip \
                            CROSS_COMPILE=aarch64-elf- \
                            CROSS_COMPILE_ARM32=arm-eabi-
}

Build_TRB() {
    Compiler=TRB

    rm -rf out
    TIME=$(date +"%m%d%H%M")
    BUILD_START=$(date +"%s")

    make  -j$(nproc --all)  O=out ARCH=arm64 SUBARCH=arm64 $Defconfig
    exec 2> >(tee -a out/error.log >&2)
    make  -j$(nproc --all)  O=out \
                            PATH="$TRB/bin:/usr/bin:$PATH" \
                            CC=clang \
                            AS=llvm-as \
                            NM=llvm-nm \
                            OBJCOPY=llvm-objcopy \
                            OBJDUMP=llvm-objdump \
                            STRIP=llvm-strip \
                            LD=ld.lld \
                            CROSS_COMPILE=aarch64-linux-gnu- \
                            CROSS_COMPILE_ARM32=arm-linux-gnueabi-
}

Build_Proton() {
    Compiler=Proton

    rm -rf out
    TIME=$(date +"%m%d%H%M")
    BUILD_START=$(date +"%s")

    make  -j$(nproc --all)  O=out ARCH=arm64 SUBARCH=arm64 $Defconfig
    exec 2> >(tee -a out/error.log >&2)
    make  -j$(nproc --all)  O=out \
                            PATH="$Proton/bin:/usr/bin:$PATH" \
                            CC=clang \
                            AS=llvm-as \
                            NM=llvm-nm \
                            OBJCOPY=llvm-objcopy \
                            OBJDUMP=llvm-objdump \
                            STRIP=llvm-strip \
                            LD=ld.lld \
                            CROSS_COMPILE=aarch64-linux-gnu- \
                            CROSS_COMPILE_ARM32=arm-linux-gnueabi-
}

Build_Clang() {
    Compiler=Clang
	MAKE="./makeparallel"

    rm -rf out
    TIME=$(date +"%m%d%H%M")
    BUILD_START=$(date +"%s")

    make  -j$(nproc --all)  O=out ARCH=arm64 SUBARCH=arm64 $Defconfig
    exec 2> >(tee -a out/error.log >&2)
    make  -j$(nproc --all)  O=out \
                        PATH="$Clang/bin:$gcc64/bin:$gcc/bin:/usr/bin:$PATH" \
                        LD_LIBRARY_PATH="$Clang/lib64:$LD_LIBRABRY_PATH" \
                        CC=clang \
                        LD=ld.lld \
                        CROSS_COMPILE=aarch64-linux-android- \
                        CROSS_COMPILE_ARM32=arm-linux-androideabi- \
                        CLANG_TRIPLE=aarch64-linux-gnu-
}

Build_Azure() {
    Compiler=Azure

    rm -rf out
    TIME=$(date +"%m%d%H%M")
    BUILD_START=$(date +"%s")

    make  -j$(nproc --all)  O=out ARCH=arm64 SUBARCH=arm64 $Defconfig
    exec 2> >(tee -a out/error.log >&2)
    make  -j$(nproc --all)  O=out \
                            PATH="$Azure/bin:/usr/bin:$PATH" \
                            CC=clang \
                            AS=llvm-as \
							AR=llvm-ar\
                            NM=llvm-nm \
                            OBJCOPY=llvm-objcopy \
                            OBJDUMP=llvm-objdump \
                            STRIP=llvm-strip \
                            LD=ld.lld \
                            CROSS_COMPILE=aarch64-linux-gnu- \
                            CROSS_COMPILE_ARM32=arm-linux-gnueabi-
}

Build_Vortex() {
    Compiler=Vortex

    rm -rf out
    TIME=$(date +"%m%d%H%M")
    BUILD_START=$(date +"%s")

    make  -j$(nproc --all)  O=out ARCH=arm64 SUBARCH=arm64 $Defconfig
    exec 2> >(tee -a out/error.log >&2)
    make  -j$(nproc --all)  O=out \
                            PATH="$Vortex/bin:/usr/bin:$PATH" \
                            CC=clang \
                            AS=llvm-as \
							AR=llvm-ar\
                            NM=llvm-nm \
                            OBJCOPY=llvm-objcopy \
                            OBJDUMP=llvm-objdump \
                            STRIP=llvm-strip \
                            LD=ld.lld \
                            CROSS_COMPILE=aarch64-linux-gnu- \
                            CROSS_COMPILE_ARM32=arm-linux-gnueabi-
}
Build_DTC() {
    Compiler=DragonTC

    rm -rf out
    TIME=$(date +"%m%d%H%M")
    BUILD_START=$(date +"%s")

    make  -j$(nproc --all)  O=out ARCH=arm64 SUBARCH=arm64 $Defconfig
    exec 2> >(tee -a out/error.log >&2)
    make  -j$(nproc --all)  O=out \
                            PATH="$DTC/bin:/$gcc64/bin:/$gcc/bin:/usr/bin:$PATH" \
                            LD_LIBRARY_PATH="$DTC/lib64:$LD_LIBRABRY_PATH" \
                            CC=clang \
                            LD=ld.lld \
                            CROSS_COMPILE=aarch64-linux-android- \
                            CROSS_COMPILE_ARM32=arm-linux-androideabi- \
                            CLANG_TRIPLE=aarch64-linux-gnu-
}

# End with success or fail
End() {
    if [ -e $MainPath/out/arch/arm64/boot/Image.gz-dtb ]; then
        BUILD_END=$(date +"%s")
        DIFF=$((BUILD_END - BUILD_START))
        MakeZip
        ZIP=$(echo *$Compiler*$TIME*.zip)

        echo "Build success in : $((DIFF / 60)) minute(s) and $((DIFF % 60)) second(s)"
       
    else
        BUILD_END=$(date +"%s")
        DIFF=$((BUILD_END - BUILD_START))

        echo "Build fail in : $((DIFF / 60)) minute(s) and $((DIFF % 60)) second(s)"

    fi
}

Text="Start to build kernel"

# Build choices
GCC() {

    Clone_GCC
    Build_GCC
    End
}

TRB() {

    Clone_TRB
    Build_TRB
    End
}

Proton() {
 
    Clone_Proton
    Build_Proton
    End
}

Clang() {
 
    Clone_Clang
    Build_Clang
    End
}

DTC() {
 
    Clone_DTC
    Build_DTC
    End
}

Azure() {
 
    Clone_Azure
    Build_Azure
    End
}

Vortex() {
 
    Clone_Vortex
    Build_Vortex
    End
}
